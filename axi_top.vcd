$date
	Wed Oct 11 04:45:34 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb $end
$var wire 1 ! WVALID $end
$var wire 4 " WSTRB [3:0] $end
$var wire 1 # WREADY $end
$var wire 32 $ WDATA [31:0] $end
$var wire 1 % RVALID $end
$var wire 2 & RRESP [1:0] $end
$var wire 1 ' RREADY $end
$var wire 32 ( RDATA [31:0] $end
$var wire 1 ) BVALID $end
$var wire 2 * BRESP [1:0] $end
$var wire 1 + BREADY $end
$var wire 1 , AwREADY $end
$var wire 1 - AWVALID $end
$var wire 3 . AWPROT [2:0] $end
$var wire 32 / AWADDR [31:0] $end
$var wire 1 0 ARVALID $end
$var wire 1 1 ARREADY $end
$var wire 3 2 ARPROT [2:0] $end
$var wire 32 3 ARADDR [31:0] $end
$var reg 1 4 clk $end
$var reg 32 5 mread_address [31:0] $end
$var reg 32 6 mwrite_address [31:0] $end
$var reg 32 7 mwrite_data [31:0] $end
$var reg 2 8 response [1:0] $end
$var reg 1 9 rst $end
$var reg 32 : sread_data [31:0] $end
$scope module test $end
$var wire 1 4 clk $end
$var wire 32 ; mread_address [31:0] $end
$var wire 32 < mwrite_address [31:0] $end
$var wire 32 = mwrite_data [31:0] $end
$var wire 2 > response [1:0] $end
$var wire 1 9 rst $end
$var wire 32 ? sread_data [31:0] $end
$var wire 1 ! WVALID $end
$var wire 4 @ WSTRB [3:0] $end
$var wire 1 # WREADY $end
$var wire 32 A WDATA [31:0] $end
$var wire 1 % RVALID $end
$var wire 2 B RRESP [1:0] $end
$var wire 1 ' RREADY $end
$var wire 32 C RDATA [31:0] $end
$var wire 1 ) BVALID $end
$var wire 2 D BRESP [1:0] $end
$var wire 1 + BREADY $end
$var wire 1 , AwREADY $end
$var wire 1 - AWVALID $end
$var wire 3 E AWPROT [2:0] $end
$var wire 32 F AWADDR [31:0] $end
$var wire 1 0 ARVALID $end
$var wire 1 1 ARREADY $end
$var wire 3 G ARPROT [2:0] $end
$var wire 32 H ARADDR [31:0] $end
$scope module master $end
$var wire 1 4 clk $end
$var wire 32 I mread_address [31:0] $end
$var wire 32 J mwrite_address [31:0] $end
$var wire 32 K mwrite_data [31:0] $end
$var wire 1 9 rst $end
$var wire 1 # WREADY $end
$var wire 1 % RVALID $end
$var wire 2 L RRESP [1:0] $end
$var wire 32 M RDATA [31:0] $end
$var wire 1 ) BVALID $end
$var wire 2 N BRESP [1:0] $end
$var wire 1 , AwREADY $end
$var wire 1 1 ARREADY $end
$var reg 32 O ARADDR [31:0] $end
$var reg 3 P ARPROT [2:0] $end
$var reg 1 0 ARVALID $end
$var reg 32 Q AWADDR [31:0] $end
$var reg 3 R AWPROT [2:0] $end
$var reg 1 - AWVALID $end
$var reg 1 + BREADY $end
$var reg 1 ' RREADY $end
$var reg 32 S WDATA [31:0] $end
$var reg 4 T WSTRB [3:0] $end
$var reg 1 ! WVALID $end
$var reg 32 U mread_data [31:0] $end
$var reg 1 V res_valid $end
$upscope $end
$scope module slave $end
$var wire 32 W ARADDR [31:0] $end
$var wire 3 X ARPROT [2:0] $end
$var wire 1 0 ARVALID $end
$var wire 32 Y AWADDR [31:0] $end
$var wire 3 Z AWPROT [2:0] $end
$var wire 1 - AWVALID $end
$var wire 1 + BREADY $end
$var wire 1 ' RREADY $end
$var wire 32 [ WDATA [31:0] $end
$var wire 4 \ WSTRB [3:0] $end
$var wire 1 ! WVALID $end
$var wire 1 4 clk $end
$var wire 2 ] response [1:0] $end
$var wire 1 9 rst $end
$var wire 32 ^ sread_data [31:0] $end
$var reg 1 1 ARREADY $end
$var reg 1 , AwREADY $end
$var reg 2 _ BRESP [1:0] $end
$var reg 1 ) BVALID $end
$var reg 32 ` RDATA [31:0] $end
$var reg 2 a RRESP [1:0] $end
$var reg 1 % RVALID $end
$var reg 1 # WREADY $end
$var reg 32 b sread_address [31:0] $end
$var reg 32 c swrite_address [31:0] $end
$var reg 32 d swrite_data [31:0] $end
$var reg 3 e write_stobe [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx e
bx d
bx c
bx b
bx a
bx `
bx _
b0 ^
b0 ]
bx \
bx [
bx Z
bx Y
bx X
bx W
xV
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
b0 K
b0 J
b0 I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
19
b0 8
b0 7
b0 6
b0 5
04
bx 3
bx 2
x1
x0
bx /
bx .
x-
x,
x+
bx *
x)
bx (
x'
bx &
x%
bx $
x#
bx "
x!
$end
#10
00
0'
0-
0!
0V
0+
b0 b
01
b0 &
b0 B
b0 L
b0 a
0%
b0 c
0,
b0 d
0#
b111 e
b0 *
b0 D
b0 N
b0 _
14
#15
04
#20
1)
b11 *
b11 D
b11 N
b11 _
1#
1,
1%
b11 &
b11 B
b11 L
b11 a
b111111 (
b111111 C
b111111 M
b111111 `
11
1+
1!
b111 "
b111 @
b111 T
b111 \
b111111111111 $
b111111111111 A
b111111111111 S
b111111111111 [
1-
b0 .
b0 E
b0 R
b0 Z
b111001 /
b111001 F
b111001 Q
b111001 Y
1'
10
b0 2
b0 G
b0 P
b0 X
b111 3
b111 H
b111 O
b111 W
b11 8
b11 >
b11 ]
b111111111111 7
b111111111111 =
b111111111111 K
b111001 6
b111001 <
b111001 J
b111111 :
b111111 ?
b111111 ^
b111 5
b111 ;
b111 I
09
14
#30
04
#40
00
b111111 U
0-
0!
1V
b111 b
0%
b111001 c
b111111111111 d
0)
14
#50
